name: CI

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21']
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: false  # Disable Go module cache to avoid tar issues
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    # Linux specific setup
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        
        # Install basic dependencies
        sudo apt-get install -y libgtk-3-dev pkg-config
        
        # Try to install both webkit versions for compatibility
        echo "Attempting to install webkit packages..."
        if ! sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev; then
          echo "Failed to install both webkit versions, trying 4.1 only..."
          sudo apt-get install -y libwebkit2gtk-4.1-dev
        fi
        
        # List available webkit packages
        echo "Available webkit packages:"
        apt list --installed | grep webkit || echo "No webkit packages found"
        
        # Check pkg-config files
        echo "Available webkit pkg-config files:"
        ls -la /usr/lib/x86_64-linux-gnu/pkgconfig/ | grep webkit || echo "No webkit .pc files found"
        
        # Create symlink for webkit2gtk-4.0 pointing to 4.1 if 4.0 is not available
        if [ ! -f /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc ]; then
          echo "Creating webkit2gtk-4.0.pc symlink..."
          sudo ln -s /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc || true
        fi
        
        # Verify webkit setup
        echo "Verifying webkit setup:"
        pkg-config --exists webkit2gtk-4.0 && echo "webkit2gtk-4.0: OK" || echo "webkit2gtk-4.0: MISSING"
        pkg-config --exists webkit2gtk-4.1 && echo "webkit2gtk-4.1: OK" || echo "webkit2gtk-4.1: MISSING"
    
    # Install Wails
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
    
    # Verify Wails installation
    - name: Wails Doctor
      run: |
        echo "Running wails doctor..."
        wails doctor
        
        # Additional verification for Linux
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          echo "Linux-specific checks:"
          echo "CGO_ENABLED: $CGO_ENABLED"
          echo "pkg-config webkit2gtk-4.0 check:"
          pkg-config --modversion webkit2gtk-4.0 || echo "webkit2gtk-4.0 not found"
          echo "pkg-config webkit2gtk-4.1 check:"
          pkg-config --modversion webkit2gtk-4.1 || echo "webkit2gtk-4.1 not found"
        fi
    
    # Frontend dependencies
    - name: Install frontend dependencies
      working-directory: frontend
      run: bun install
    
    # Build frontend (required for go:embed)
    # The main.go file uses //go:embed all:frontend/dist to embed the frontend
    # assets into the binary. This requires the dist directory to exist at
    # compile time, so we must build the frontend before running Go tests.
    - name: Build frontend
      working-directory: frontend
      run: bun run build
    
    # Backend tests
    - name: Run backend tests
      run: go test ./... -v -cover
    
    # Frontend tests
    - name: Run frontend tests
      working-directory: frontend
      run: bun run test:coverage
    
    # Install Playwright browsers for E2E tests
    - name: Install Playwright browsers
      working-directory: frontend
      run: bunx playwright install --with-deps chromium
    
    # Start Wails dev server in background for E2E tests
    - name: Start Wails dev server (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Starting Wails dev server..."
        echo "Go version: $(go version)"
        echo "Wails version: $(wails version)"
        
        # Check if frontend build exists
        if [ ! -d "frontend/dist" ]; then
          echo "Frontend dist directory not found, building..."
          cd frontend && bun run build && cd ..
        fi
        
        # Try a quick compilation test first (Linux only)
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          echo "Testing Wails compilation on Linux..."
          if ! timeout 30 wails build -nsis=false -debug > build-test.log 2>&1; then
            echo "Wails build test failed, checking logs:"
            cat build-test.log
            echo "Continuing anyway, but dev server may fail..."
          else
            echo "Wails build test successful"
          fi
        fi
        
        echo "Starting wails dev server..."
        wails dev > wails.log 2>&1 &
        echo $! > wails.pid
        
        # Wait for dev server to be ready
        timeout=60
        while ! curl -s http://localhost:34115 > /dev/null && [ $timeout -gt 0 ]; do
          sleep 1
          timeout=$((timeout - 1))
          if [ $((60 - timeout)) -eq 30 ]; then
            echo "Still waiting for Wails dev server (30s elapsed)..."
            echo "Current log output:"
            tail -10 wails.log || echo "No log output yet"
          fi
        done
        
        if [ $timeout -eq 0 ]; then
          echo "Wails dev server failed to start after 60 seconds"
          echo "Full wails.log contents:"
          cat wails.log
          echo "System info:"
          echo "OS: $(uname -a)"
          echo "Available ports:"
          netstat -tuln | grep :34115 || echo "Port 34115 not found"
          exit 1
        fi
        echo "Wails dev server is ready"
    
    # Start Wails dev server in background for E2E tests (Windows)
    - name: Start Wails dev server (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Starting Wails dev server..."
        go version
        wails version
        
        # Check if frontend build exists
        if (!(Test-Path "frontend/dist")) {
          echo "Frontend dist directory not found, building..."
          cd frontend; bun run build; cd ..
        }
        
        # Start Wails dev server in background
        Start-Process -FilePath "wails" -ArgumentList "dev" -RedirectStandardOutput "wails.log" -RedirectStandardError "wails.log" -NoNewWindow
        
        # Wait for dev server to be ready
        $timeout = 60
        while ($timeout -gt 0) {
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:34115" -UseBasicParsing -TimeoutSec 1 -ErrorAction Stop
            break
          } catch {
            Start-Sleep -Seconds 1
            $timeout--
            if ($timeout -eq 30) {
              echo "Still waiting for Wails dev server (30s elapsed)..."
              if (Test-Path "wails.log") {
                echo "Current log output:"
                Get-Content "wails.log" -Tail 10
              } else {
                echo "No log output yet"
              }
            }
          }
        }
        
        if ($timeout -eq 0) {
          echo "Wails dev server failed to start after 60 seconds"
          if (Test-Path "wails.log") {
            echo "Full wails.log contents:"
            Get-Content "wails.log"
          }
          echo "System info:"
          Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion
          echo "Available ports:"
          netstat -an | Select-String ":34115"
          exit 1
        }
        echo "Wails dev server is ready"
      shell: pwsh
    
    # Run E2E tests
    - name: Run E2E tests
      working-directory: frontend
      run: bun run test:e2e
      env:
        CI: true
    
    # Stop Wails dev server (Linux/macOS)
    - name: Stop Wails dev server (Linux/macOS)
      if: always() && matrix.os != 'windows-latest'
      run: |
        if [ -f wails.pid ]; then
          kill $(cat wails.pid) || true
          rm wails.pid
        fi
    
    # Stop Wails dev server (Windows)
    - name: Stop Wails dev server (Windows)
      if: always() && matrix.os == 'windows-latest'
      run: |
        # Kill any wails processes
        Get-Process -Name "wails" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
        # Also kill any processes listening on port 34115
        $processes = Get-NetTCPConnection -LocalPort 34115 -ErrorAction SilentlyContinue | Select-Object -ExpandProperty OwningProcess
        foreach ($proc in $processes) {
          Stop-Process -Id $proc -Force -ErrorAction SilentlyContinue
        }
      shell: pwsh
    
    # Upload E2E test results on failure
    - name: Upload E2E test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results-${{ matrix.os }}
        path: |
          frontend/tests/e2e/test-results/
          frontend/tests/e2e/playwright-report/
        retention-days: 7
    
    # Build the application
    - name: Build application
      run: wails build
    
    # Ad-hoc sign macOS app to prevent "damaged app" error
    - name: Ad-hoc Sign macOS App
      if: matrix.os == 'macos-latest'
      run: |
        echo "Cleaning extended attributes from Weld.app..."
        xattr -cr build/bin/Weld.app
        echo "Ad-hoc signing Weld.app..."
        codesign --force --deep --sign - build/bin/Weld.app
        echo "Verifying signature..."
        codesign --verify --verbose build/bin/Weld.app
      shell: bash
    
    # Upload artifacts (optional - for debugging)
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: weld-${{ matrix.os }}
        path: |
          build/bin/*
        retention-days: 7