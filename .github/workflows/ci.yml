name: CI

# Optimized CI workflow with quick smoke tests and parallel execution
# Target: Complete all checks in under 10 minutes (ideally 2-3 minutes)

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

jobs:
  # Quick smoke test - fail fast on Ubuntu
  quick-test:
    name: Quick Smoke Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: go.sum
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.bun/install/cache
          frontend/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev pkg-config
        # Install webkit (whatever version is available)
        sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev
        
        # Create symlink if needed (Wails looks for 4.0)
        if [ ! -f /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc ] && [ -f /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc ]; then
          sudo ln -s /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc
        fi
    
    - name: Cache Wails binary
      id: cache-wails
      uses: actions/cache@v4
      with:
        path: ~/go/bin/wails
        key: ${{ runner.os }}-wails-v2.10.1
    
    - name: Install Wails
      if: steps.cache-wails.outputs.cache-hit != 'true'
      run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: bun install
    
    - name: Run Go unit tests (parallel)
      run: go test ./... -v -parallel 4 -count=1
    
    - name: Run frontend unit tests
      working-directory: frontend
      run: bun run test --run
    
    - name: Quick build verification
      run: wails build -skip-bindings -nosyncgomod

  # Full test matrix - runs after quick test passes
  full-test:
    name: Full Test
    needs: quick-test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      CGO_ENABLED: 1
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: go.sum
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.bun/install/cache
          frontend/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    # Linux specific setup
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev pkg-config
        sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev
        
        if [ ! -f /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc ] && [ -f /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc ]; then
          sudo ln -s /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc
        fi
    
    # Cache Wails binary
    - name: Cache Wails binary
      id: cache-wails
      uses: actions/cache@v4
      with:
        path: ~/go/bin/wails
        key: ${{ runner.os }}-wails-v2.10.1
    
    # Install Wails (all platforms)
    - name: Install Wails
      if: steps.cache-wails.outputs.cache-hit != 'true'
      shell: bash
      run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
    
    - name: Verify Wails installation
      shell: bash
      run: wails doctor
    
    - name: Install frontend dependencies
      working-directory: frontend
      shell: bash
      run: bun install
    
    # Build frontend (required for go:embed)
    - name: Build frontend
      working-directory: frontend
      shell: bash
      run: bun run build
    
    # Run tests with parallelization
    - name: Run backend tests
      shell: bash
      run: go test ./... -v -cover -parallel 4
    
    - name: Run frontend tests with coverage
      working-directory: frontend
      shell: bash
      run: bun run test:coverage
    
    # Build the application
    - name: Build application
      shell: bash
      run: wails build
    
    # Ad-hoc sign macOS app
    - name: Ad-hoc Sign macOS App
      if: matrix.os == 'macos-latest'
      run: |
        echo "Cleaning extended attributes from Weld.app..."
        xattr -cr build/bin/Weld.app
        echo "Ad-hoc signing Weld.app..."
        codesign --force --deep --sign - build/bin/Weld.app
        echo "Verifying signature..."
        codesign --verify --verbose build/bin/Weld.app

  # E2E tests - macOS only, uses pre-built binary
  e2e-test:
    name: E2E Tests
    needs: quick-test
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: go.sum
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.bun/install/cache
          frontend/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Cache Wails binary
      id: cache-wails
      uses: actions/cache@v4
      with:
        path: ~/go/bin/wails
        key: ${{ runner.os }}-wails-v2.10.1
    
    - name: Install Wails
      if: steps.cache-wails.outputs.cache-hit != 'true'
      run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: bun install
    
    - name: Build frontend
      working-directory: frontend
      run: bun run build
    
    - name: Build application for E2E
      run: wails build -debug
    
    - name: Install Playwright browsers
      working-directory: frontend
      run: bunx playwright install --with-deps chromium
    
    # Start the built application instead of wails dev
    - name: Start application for E2E tests
      run: |
        echo "Starting built application for E2E tests..."
        # The built app needs to be started differently than wails dev
        # For now, fall back to wails dev but with optimizations
        wails dev > wails.log 2>&1 &
        WAILS_PID=$!
        echo $WAILS_PID > wails.pid
        
        # Wait for port 34115 to be listening
        echo "Waiting for application to be ready..."
        timeout=60
        while ! lsof -iTCP:34115 -sTCP:LISTEN >/dev/null 2>&1 && [ $timeout -gt 0 ]; do
          sleep 1
          timeout=$((timeout - 1))
          if [ $((60 - timeout)) -eq 30 ]; then
            echo "Still waiting for port 34115 (30s elapsed)..."
            if ! kill -0 $WAILS_PID 2>/dev/null; then
              echo "Application process died! Last log output:"
              tail -20 wails.log
              exit 1
            fi
          fi
        done
        
        if [ $timeout -eq 0 ]; then
          echo "Port 34115 not listening after 60 seconds"
          echo "Application log contents:"
          cat wails.log
          exit 1
        fi
        
        echo "Application is ready, proceeding with E2E tests"
    
    - name: Run E2E tests (parallel)
      working-directory: frontend
      run: bun run test:e2e --workers=4
      env:
        CI: true
    
    - name: Stop application
      if: always()
      run: |
        if [ -f wails.pid ]; then
          kill $(cat wails.pid) || true
          rm wails.pid
        fi
    
    - name: Upload E2E test results on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: |
          frontend/tests/e2e/test-results/
          frontend/tests/e2e/playwright-report/
        retention-days: 7

  # Final status check - ensures all jobs passed
  ci-status:
    name: CI Status
    needs: [quick-test, full-test, e2e-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Check CI Status
      run: |
        if [ "${{ needs.quick-test.result }}" != "success" ] || \
           [ "${{ needs.full-test.result }}" != "success" ] || \
           [ "${{ needs.e2e-test.result }}" != "success" ]; then
          echo "CI failed"
          exit 1
        fi
        echo "All CI checks passed!"