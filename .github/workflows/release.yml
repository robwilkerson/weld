name: Release Build

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            use_qemu: true
          
          # Windows builds
          - os: windows-latest
            platform: windows
            arch: amd64
          - os: windows-latest
            platform: windows
            arch: arm64
          
          # macOS builds (separate architectures instead of universal)
          - os: macos-latest
            platform: darwin
            arch: amd64
          - os: macos-latest
            platform: darwin
            arch: arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    # Set up QEMU for ARM64 builds
    - name: Set up QEMU
      if: matrix.use_qemu == true
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64
    
    # Set up Docker Buildx for multi-arch builds
    - name: Set up Docker Buildx
      if: matrix.use_qemu == true
      uses: docker/setup-buildx-action@v3
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    # Linux specific setup
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest' && matrix.use_qemu != true
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev
        
        # Create symlink for webkit2gtk-4.0 pointing to 4.1
        sudo ln -s /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc || true
    
    # Install Wails (skip for QEMU builds - we'll install in Docker)
    - name: Install Wails
      if: matrix.use_qemu != true
      run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
    
    # Build for production (non-QEMU)
    - name: Build Weld
      if: matrix.use_qemu != true
      run: |
        # For cross-compilation support
        if [ "${{ matrix.platform }}" = "windows" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
          export GOARCH=arm64
        elif [ "${{ matrix.platform }}" = "darwin" ]; then
          # macOS can build for both architectures natively
          export GOARCH=${{ matrix.arch }}
        fi
        
        wails build -platform ${{ matrix.platform }}/${{ matrix.arch }} -clean
      shell: bash
    
    # Build for Linux ARM64 using Docker/QEMU
    - name: Build Weld (Linux ARM64 with QEMU)
      if: matrix.use_qemu == true
      run: |
        # Create a Dockerfile for ARM64 build
        cat > Dockerfile.arm64 << 'EOF'
        FROM --platform=linux/arm64 golang:1.21-bookworm
        
        # Install dependencies
        RUN apt-get update && apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            build-essential \
            pkg-config \
            nodejs \
            npm \
            curl \
            git
        
        # Install Bun
        RUN curl -fsSL https://bun.sh/install | bash
        ENV PATH="/root/.bun/bin:$PATH"
        
        # Install Wails
        RUN go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
        
        # Copy source code
        WORKDIR /build
        COPY . .
        
        # Build the application
        RUN wails build -platform linux/arm64 -clean
        EOF
        
        # Build using Docker with QEMU emulation
        docker buildx create --use --name mybuilder || true
        docker buildx build --platform linux/arm64 -f Dockerfile.arm64 --output type=local,dest=. .
        
        # The build output will be in build/bin/
      shell: bash
    
    # Ad-hoc sign macOS app to prevent "damaged app" error
    - name: Ad-hoc Sign macOS App
      if: matrix.os == 'macos-latest'
      run: |
        echo "Cleaning extended attributes from Weld.app..."
        xattr -cr build/bin/Weld.app
        echo "Ad-hoc signing Weld.app..."
        codesign --force --deep --sign - build/bin/Weld.app
        echo "Verifying signature..."
        codesign --verify --verbose build/bin/Weld.app
      shell: bash
    
    # Package the build
    - name: Package Build
      run: |
        cd build/bin
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          tar -czf weld-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz *
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a weld-${{ matrix.platform }}-${{ matrix.arch }}.zip *
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Create a DMG or ZIP for macOS
          zip -r weld-${{ matrix.platform }}-${{ matrix.arch }}.zip Weld.app
        fi
      shell: bash
    
    # Upload release artifacts
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: weld-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          build/bin/weld-*.tar.gz
          build/bin/weld-*.zip
        retention-days: 30
    
    # Create release (only on tag push)
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          build/bin/weld-*.tar.gz
          build/bin/weld-*.zip
        draft: true
        generate_release_notes: true