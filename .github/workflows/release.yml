name: Release Build

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: windows-latest
            platform: windows
            arch: amd64
          - os: macos-latest
            platform: darwin
            arch: universal
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    # Linux specific setup
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev
        # Create symlink for webkit2gtk-4.0 pointing to 4.1
        sudo ln -s /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc || true
    
    # Install Wails
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
    
    # Build for production
    - name: Build Weld
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Use Makefile for macOS to include CLI script
          make build
        else
          wails build -platform ${{ matrix.platform }}/${{ matrix.arch }} -clean
        fi
      shell: bash
    
    # Package the build
    - name: Package Build
      run: |
        cd build/bin
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          tar -czf weld-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz *
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a weld-${{ matrix.platform }}-${{ matrix.arch }}.zip *
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Create a DMG or ZIP for macOS
          zip -r weld-${{ matrix.platform }}-${{ matrix.arch }}.zip Weld.app
        fi
      shell: bash
    
    # Upload release artifacts
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: weld-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          build/bin/weld-*.tar.gz
          build/bin/weld-*.zip
        retention-days: 30
    
    # Create release (only on tag push)
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          build/bin/weld-*.tar.gz
          build/bin/weld-*.zip
        draft: true
        generate_release_notes: true