name: Release Build

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
          
          # Windows builds
          - os: windows-latest
            platform: windows
            arch: amd64
          - os: windows-latest
            platform: windows
            arch: arm64
          
          # macOS builds (separate architectures instead of universal)
          - os: macos-latest
            platform: darwin
            arch: amd64
          - os: macos-latest
            platform: darwin
            arch: arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    # Linux specific setup
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev
        
        # Install cross-compilation tools for ARM64
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi
        
        # Create symlink for webkit2gtk-4.0 pointing to 4.1
        sudo ln -s /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc || true
    
    # Install Wails
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
    
    # Build for production
    - name: Build Weld
      run: |
        # For cross-compilation support
        if [ "${{ matrix.platform }}" = "linux" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
          export GOARCH=arm64
          export CGO_ENABLED=1
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
        elif [ "${{ matrix.platform }}" = "windows" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
          export GOARCH=arm64
        elif [ "${{ matrix.platform }}" = "darwin" ]; then
          # macOS can build for both architectures natively
          export GOARCH=${{ matrix.arch }}
        fi
        
        wails build -platform ${{ matrix.platform }}/${{ matrix.arch }} -clean
      shell: bash
    
    # Ad-hoc sign macOS app to prevent "damaged app" error
    - name: Ad-hoc Sign macOS App
      if: matrix.os == 'macos-latest'
      run: |
        echo "Cleaning extended attributes from Weld.app..."
        xattr -cr build/bin/Weld.app
        echo "Ad-hoc signing Weld.app..."
        codesign --force --deep --sign - build/bin/Weld.app
        echo "Verifying signature..."
        codesign --verify --verbose build/bin/Weld.app
      shell: bash
    
    # Package the build
    - name: Package Build
      run: |
        cd build/bin
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          tar -czf weld-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz *
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a weld-${{ matrix.platform }}-${{ matrix.arch }}.zip *
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Create a DMG or ZIP for macOS
          zip -r weld-${{ matrix.platform }}-${{ matrix.arch }}.zip Weld.app
        fi
      shell: bash
    
    # Upload release artifacts
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: weld-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          build/bin/weld-*.tar.gz
          build/bin/weld-*.zip
        retention-days: 30
    
    # Create release (only on tag push)
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          build/bin/weld-*.tar.gz
          build/bin/weld-*.zip
        draft: true
        generate_release_notes: true